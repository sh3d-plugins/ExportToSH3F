/*
 * ExportSH3FPlugin.java 15 Dec 2008
 *
 * Copyright (c) 2008 Emmanuel PUYBARET / eTeks <info@eteks.com>. All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
package com.eteks.sweethome3d.plugin.exportsh3f;

import java.awt.Component;
import java.awt.KeyboardFocusManager;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.net.URL;
import java.security.AccessControlException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCatalog;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.plugin.Plugin;
import com.eteks.sweethome3d.plugin.PluginAction;
import com.eteks.sweethome3d.tools.URLContent;

/**
 * A plug-in that generates a SH3F file from the current list of imported models.
 * @author Emmanuel Puybaret
 */
public class ExportSH3FPlugin extends Plugin {
  private static final String PLUGIN_FURNITURE_CATALOG_FAMILY = "PluginFurnitureCatalog.properties";
  private static final String CATALOG_FILE_HEADER = "#\n# " + PLUGIN_FURNITURE_CATALOG_FAMILY + " %tc\n" + 
      "# Generated by com.eteks.sweethome3d.plugin.exportsh3f.ExportSH3FPlugin\n#\n";

  // Same keys as the ones of DefaultFurnitureCatalog class
  private static final String FURNITURE_ID             = "id#";
  private static final String FURNITURE_NAME           = "name#";
  private static final String FURNITURE_DESCRIPTION    = "description#";
  private static final String FURNITURE_CATEGORY       = "category#";
  private static final String FURNITURE_ICON           = "icon#";
  private static final String FURNITURE_MODEL          = "model#";
  private static final String FURNITURE_WIDTH          = "width#";
  private static final String FURNITURE_DEPTH          = "depth#";
  private static final String FURNITURE_HEIGHT         = "height#";
  private static final String FURNITURE_MOVABLE        = "movable#";
  private static final String FURNITURE_DOOR_OR_WINDOW = "doorOrWindow#";
  private static final String FURNITURE_ELEVATION      = "elevation#";
  private static final String FURNITURE_COLOR          = "furnitureColor#";
  private static final String FURNITURE_MODEL_ROTATION = "modelRotation#";
  private static final String FURNITURE_CREATOR        = "creator#";
  private static final String FURNITURE_MULTI_PART_MODEL = "multiPartModel#";
  private static final String FURNITURE_RESIZABLE      = "resizable#";
  private static final String FURNITURE_PRICE          = "price#";
  private static final String FURNITURE_VALUE_ADDED_TAX_PERCENTAGE = "valueAddedTaxPercentage#";

  private int fileContentIndex;
  
  @Override
  public PluginAction [] getActions() {
    return new PluginAction [] {new PluginAction("com.eteks.sweethome3d.plugin.exportsh3f.ApplicationPlugin", 
            "EXPORT_IMPORTED_FURNITURE_TO_SH3F", getPluginClassLoader(), true) {
        @Override
        public void execute() {
          exportImportedFurnitureToSH3F();
        }
      }
    };
  }

  /**
   * Exports the imported furniture to a SH3F file chosen par the user.
   */
  private void exportImportedFurnitureToSH3F() {
    ResourceBundle resource = ResourceBundle.getBundle(
        "com.eteks.sweethome3d.plugin.exportsh3f.ApplicationPlugin", 
        Locale.getDefault(), getPluginClassLoader());
    Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager().getActiveWindow();
    
    FurnitureCatalog furnitureCatalog = getUserPreferences().getFurnitureCatalog();
    // Retrieve imported furniture 
    List<CatalogPieceOfFurniture> importedFurniture = new ArrayList<CatalogPieceOfFurniture>();
    for (FurnitureCategory category : furnitureCatalog.getCategories()) {
      for (CatalogPieceOfFurniture piece : category.getFurniture()) {
        if (piece.isModifiable()) {
          importedFurniture.add(piece);
        }
      }
    }
    
    if (importedFurniture.size() == 0) {
      JOptionPane.showMessageDialog(focusOwner, resource.getString("noFurnitureToExport.message"),
          resource.getString("exportToSH3F.title"), JOptionPane.INFORMATION_MESSAGE);   
      return;
    }
    
    // Show a warning message
    JOptionPane.showMessageDialog(focusOwner, resource.getString("exportWarning.message"),
        resource.getString("exportToSH3F.title"), JOptionPane.WARNING_MESSAGE);
    
    ZipOutputStream zipOut = null;
    Map<Content, String> contentEntries = new HashMap<Content, String>();
    try {
      OutputStream out = showFileChooser(focusOwner);
      if (out != null) {
        // Create a zip output on file  
        zipOut = new ZipOutputStream(out);
        // Write furniture description file in first entry 
        zipOut.putNextEntry(new ZipEntry(PLUGIN_FURNITURE_CATALOG_FAMILY));
        writeCatalog(zipOut, importedFurniture, contentEntries);
        zipOut.closeEntry();
        // Write Content objects in files
        for (CatalogPieceOfFurniture piece : importedFurniture) {
          if (piece.isModifiable()) {
            writePieceOfFurnitureEntries(zipOut, piece, contentEntries);
          }
        }  
        // Finish zip writing
        zipOut.finish();
        zipOut.close();
        zipOut = null;
        
        String messageFormat = resource.getString("exportedFurnitureCount.message");
        JOptionPane.showMessageDialog(focusOwner, String.format(messageFormat, importedFurniture.size()),
            resource.getString("exportToSH3F.title"), JOptionPane.INFORMATION_MESSAGE);
      }
    } catch (IOException ex) {
      showExportError(focusOwner, resource, ex);
    } finally {
      try {
        if (zipOut != null) {
          zipOut.close();
        }
      } catch (IOException ex) {
        showExportError(focusOwner, resource, ex);
      }
    }
  }

  /**
   * Returns the file chosen by the user as furniture.
   */
  private OutputStream showFileChooser(Component parent) throws IOException {
    JFileChooser fileChooser;
    try {
      fileChooser = new JFileChooser();
    } catch (AccessControlException ex) {
      throw new IOException(ex.getMessage());
    }
    fileChooser.setFileFilter(new FileFilter() {
        @Override
        public boolean accept(File file) {
          // Accept directories and .sh3f files
          return file.isDirectory()
              || file.getName().toLowerCase().endsWith(".sh3f");
        }
        
        @Override
        public String getDescription() {
          return "Furniture library";
        }
      });
    fileChooser.setSelectedFile(new File("furniture.sh3f"));
    if (fileChooser.showSaveDialog(parent) == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fileChooser.getSelectedFile();
      if (!selectedFile.getName().toLowerCase().endsWith(".sh3f")) {
        selectedFile = new File(selectedFile.getAbsolutePath() + ".sh3f");
      }
      // Return an output stream to selected file
      return new FileOutputStream(selectedFile);
    } else {
      return null;
    }
  }
  
  /**
   * Writes in <code>output</code> the catalog describing the given <code>furniture</code>
   * with properties as defined as in <code>DefaultFurnitureCatalog</code>. 
   */
  private void writeCatalog(OutputStream output,
                            List<CatalogPieceOfFurniture> furniture, 
                            Map<Content, String> contentEntries) throws IOException {
    BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(output, "ISO-8859-1"));
    writer.write(String.format(CATALOG_FILE_HEADER, new Date()));
    int i = 1;
    for (CatalogPieceOfFurniture piece : furniture) {
      writer.newLine();
      if (piece.getId() != null) {
        writeProperty(writer, FURNITURE_ID + i, piece.getId());
      }
      writeProperty(writer, FURNITURE_NAME + i, piece.getName());
      if (piece.getDescription() != null) {
        writeProperty(writer, FURNITURE_DESCRIPTION + i, piece.getDescription());
      }
      writeProperty(writer, FURNITURE_CATEGORY + i, piece.getCategory().getName());
      String iconEntryName = getEntryName(piece.getIcon());
      contentEntries.put(piece.getIcon(), iconEntryName);      
      writeProperty(writer, FURNITURE_ICON + i, "/" + iconEntryName);
      if (piece.getModel() instanceof URLContent
          && ((URLContent)piece.getModel()).isJAREntry()) {
        URLContent urlContent = (URLContent)piece.getModel();
        String jarFile = urlContent.getJAREntryURL().getFile();
        writeProperty(writer, FURNITURE_MODEL + i, 
            "/" + jarFile.substring(jarFile.lastIndexOf('/') + 1) + "/" + urlContent.getJAREntryName()) ;
        writeProperty(writer, FURNITURE_MULTI_PART_MODEL + i, "true");
      } else {
        String modelEntryName = getEntryName(piece.getModel());
        contentEntries.put(piece.getModel(), modelEntryName);      
        writeProperty(writer, FURNITURE_MODEL + i, "/" + modelEntryName);
      }
      writeProperty(writer, FURNITURE_WIDTH + i, piece.getWidth());
      writeProperty(writer, FURNITURE_DEPTH + i, piece.getDepth());
      writeProperty(writer, FURNITURE_HEIGHT + i, piece.getHeight());
      writeProperty(writer, FURNITURE_MOVABLE + i, piece.isMovable());
      writeProperty(writer, FURNITURE_DOOR_OR_WINDOW + i, piece.isDoorOrWindow());
      if (piece.getElevation() > 0) {
        writeProperty(writer, FURNITURE_ELEVATION + i, piece.getElevation());
      }
      if (piece.getColor() != null) {
        writeProperty(writer, FURNITURE_COLOR + i, String.valueOf(piece.getColor()));
      }
      float [][] modelRotation = piece.getModelRotation();
      String modelRotationString = 
          Math.round(modelRotation[0][0]) + " " + Math.round(modelRotation[0][1]) + " " + Math.round(modelRotation[0][2]) + " "
        + Math.round(modelRotation[1][0]) + " " + Math.round(modelRotation[1][1]) + " " + Math.round(modelRotation[1][2]) + " "
        + Math.round(modelRotation[2][0]) + " " + Math.round(modelRotation[2][1]) + " " + Math.round(modelRotation[2][2]);
      if (!"1 0 0 0 1 0 0 0 1".equals(modelRotationString)) {
        writeProperty(writer, FURNITURE_MODEL_ROTATION + i, modelRotationString);
      }
      if (!piece.isResizable()) {
        writeProperty(writer, FURNITURE_RESIZABLE + i, piece.isResizable());
      }
      if (piece.getPrice() != null) {
        writeProperty(writer, FURNITURE_PRICE + i, piece.getPrice());
      }
      if (piece.getValueAddedTaxPercentage() != null) {
        writeProperty(writer, FURNITURE_VALUE_ADDED_TAX_PERCENTAGE + i, piece.getValueAddedTaxPercentage());
      }
      if (piece.getCreator() != null) {
        writeProperty(writer, FURNITURE_CREATOR + i, piece.getCreator());
      }
      i++;
    }
    writer.flush();
  }
    
  /**
   * Returns the entry name of a <code>content</code>.
   */
  private String getEntryName(Content content) {
    if (content instanceof URLContent) {
      String file = ((URLContent)content).getURL().getFile();
      return file.substring(file.lastIndexOf('/') + 1);
    } else {
      return "content" + this.fileContentIndex++;
    }
  }

  /**
   * Writes the (<code>key</code>, <code>value</code>) of a property
   * in <code>writer</code>.
   */
  private void writeProperty(BufferedWriter writer, String key, Object value) throws IOException {
    writer.write(key);
    writer.write("=");
    
    String s = value.toString();
    for (int x = 0; x < s.length(); x++) {
      char aChar = s.charAt(x);
      // Handle common case first, selecting largest block that avoids the specials below
      if ((aChar > 61) && (aChar < 127)) {
        if (aChar == '\\') {
          writer.write('\\');
          writer.write('\\');
          continue;
        }
        writer.write(aChar);
        continue;
      }
      switch (aChar) {
        case ' ':
          writer.write(' ');
          break;
        case '\t':
          writer.write('\\');
          writer.write('t');
          break;
        default:
          if ((aChar < 0x0020) || (aChar > 0x007e)) {
            writer.write('\\');
            writer.write('u');
            writer.write(Integer.toHexString((aChar >> 12) & 0xF));
            writer.write(Integer.toHexString((aChar >> 8) & 0xF));
            writer.write(Integer.toHexString((aChar >> 4) & 0xF));
            writer.write(Integer.toHexString(aChar & 0xF));
          } else {
            writer.write(aChar);
          }
      }
    }
    writer.newLine();    
  }

  /**
   * Writes in <code>zipOut</code> stream the icon and the model entries of a given <code>piece</code>.
   */
  private void writePieceOfFurnitureEntries(ZipOutputStream zipOut,
                                            CatalogPieceOfFurniture piece, 
                                            Map<Content, String> contentEntries) throws IOException {
    writeZipEntry(zipOut, contentEntries.get(piece.getIcon()), piece.getIcon());
 
    if (piece.getModel() instanceof URLContent
        && ((URLContent)piece.getModel()).isJAREntry()) {
      URLContent urlContent = (URLContent)piece.getModel();
      String jarFile = urlContent.getJAREntryURL().getFile();
      writeZipEntries(zipOut, jarFile.substring(jarFile.lastIndexOf('/') + 1), urlContent);
    } else {
      writeZipEntry(zipOut, contentEntries.get(piece.getModel()), piece.getModel());
    }
  }
  
  /**
   * Writes in <code>zipOut</code> stream all the sibling files of the zipped 
   * <code>urlContent</code>.
   */
  private void writeZipEntries(ZipOutputStream zipOut, 
                               String directory,
                               URLContent urlContent) throws IOException {
    ZipInputStream zipIn = null;
    try {
      // Open zipped stream that contains urlContent
      zipIn = new ZipInputStream(urlContent.getJAREntryURL().openStream());
      // Write each zipped stream entry in home stream 
      for (ZipEntry entry; (entry = zipIn.getNextEntry()) != null; ) {
        String zipEntryName = entry.getName();
        int lastIndexOfSlash = zipEntryName.lastIndexOf('/');
        if (lastIndexOfSlash == zipEntryName.length() - 1 
            || zipEntryName.charAt(lastIndexOfSlash + 1) != '.') {
          Content siblingContent = new URLContent(new URL("jar:" + urlContent.getJAREntryURL() + "!/" + zipEntryName));
          writeZipEntry(zipOut, directory + "/" + zipEntryName, siblingContent);
        }
      }
    } finally {
      if (zipIn != null) {
        zipIn.close();
      }
    }
  }

  /**
   * Writes in <code>zipOut</code> stream a new entry named <code>entryName</code> that 
   * contains a given <code>content</code>.
   */
  private void writeZipEntry(ZipOutputStream zipOut, String entryName, Content content) throws IOException {
    byte [] buffer = new byte [8096];
    InputStream contentIn = null;
    try {
      zipOut.putNextEntry(new ZipEntry(entryName));
      contentIn = content.openStream();          
      int size; 
      while ((size = contentIn.read(buffer)) != -1) {
        zipOut.write(buffer, 0, size);
      }
      zipOut.closeEntry();  
    } finally {
      if (contentIn != null) {          
        contentIn.close();
      }
    }
  }

  /**
   * Shows a message error.
   */
  private void showExportError(Component parent,
                               ResourceBundle resource, 
                               IOException ex) {
    String messageFormat = resource.getString("exportError.message");
    JOptionPane.showMessageDialog(parent, String.format(messageFormat, ex.getMessage()), 
        resource.getString("exportError.title"), JOptionPane.ERROR_MESSAGE);
  }
}
